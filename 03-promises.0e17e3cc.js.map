{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA9CMQ,SAASC,cAAc,SAG/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAEC,iBACF,IAAMC,EAAeF,EAAEG,cACnBd,EAAQe,OAAOF,EAAab,MAAMgB,OAClCC,EAAOF,OAAOF,EAAaI,KAAKD,OAChCE,EAASH,OAAOF,EAAaK,OAAOF,QASsB,SAAtChB,EAAOiB,EAAMC,GACrC,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACrDrB,EAAcqB,EAAUnB,GACrBoB,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUuB,EAAKD,EAALrB,MACjBuB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAN,G,IAAGtB,EAAQsB,EAARtB,SAAUuB,EAAKD,EAALrB,MAClBuB,EAAA3B,GAAS4B,OAAOI,QACd,sBAAuCF,OAAf3B,EAAS,QAAY2B,OAANJ,EAAM,M,IAGnDtB,GAASiB,C,EApBXY,CAAiB7B,EAAOiB,EAAMC,GAC9BL,EAAaiB,QACbP,EAAA3B,GAASmC,QAAQC,OAAO,4BACxBT,EAAA3B,GAASmC,QAAQE,OAAOjC,EAAQiB,EAAOC,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Імпортуємо бібліотеку.\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\n// Додаємо обробники подій\nform.addEventListener('submit', onCreateBtnClick);\n\nfunction onCreateBtnClick(e) {\n  e.preventDefault();\n  const formElements = e.currentTarget;\n  let delay = Number(formElements.delay.value);\n  let step = Number(formElements.step.value);\n  let amount = Number(formElements.amount.value);\n\n  generatePromises(delay, step, amount);\n  formElements.reset();\n  Notiflix.Loading.circle('Promises are handling...');\n  Notiflix.Loading.remove(delay + step * amount);\n}\n\n// Функція повертає один проміс, який виконується або відхиляється через delay часу.\nfunction generatePromises(delay, step, amount) {\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\n// Функція повертає проміс, який виконується або відхиляється після заданої затримки.\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","formElements","currentTarget","Number","value","step","amount","position1","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$generatePromises","reset","Loading","circle","remove"],"version":3,"file":"03-promises.0e17e3cc.js.map"}