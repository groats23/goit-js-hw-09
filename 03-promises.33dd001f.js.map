{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAuCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA9CAQ,SAASC,cAAc,SAG/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAEC,iBACF,MAAMC,EAAeF,EAAEG,cACvB,IAAId,EAAQe,OAAOF,EAAab,MAAMgB,OAClCC,EAAOF,OAAOF,EAAaI,KAAKD,OAChCE,EAASH,OAAOF,EAAaK,OAAOF,QASsB,SAAtCG,EAAOF,EAAMC,GACrC,IAAK,IAAIE,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EACrDtB,EAAcsB,EAAUD,GACrBE,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAqBzB,QAAiBC,MAAU,IAGnDyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBsB,EAAA1B,GAAS2B,OAAOG,QACd,sBAAoB3B,QAAiBC,MAAU,IAGrDmB,GAASF,C,EApBXU,CAAiB3B,EAAOiB,EAAMC,GAC9BL,EAAae,QACbN,EAAA1B,GAASiC,QAAQC,OAAO,4BACxBR,EAAA1B,GAASiC,QAAQE,OAAO/B,EAAQiB,EAAOC,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Імпортуємо бібліотеку.\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\n// Додаємо обробники подій\nform.addEventListener('submit', onCreateBtnClick);\n\nfunction onCreateBtnClick(e) {\n  e.preventDefault();\n  const formElements = e.currentTarget;\n  let delay = Number(formElements.delay.value);\n  let step = Number(formElements.step.value);\n  let amount = Number(formElements.amount.value);\n\n  generatePromises(delay, step, amount);\n  formElements.reset();\n  Notiflix.Loading.circle('Promises are handling...');\n  Notiflix.Loading.remove(delay + step * amount);\n}\n\n// Функція повертає один проміс, який виконується або відхиляється через delay часу.\nfunction generatePromises(delay, step, amount) {\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\n// Функція повертає проміс, який виконується або відхиляється після заданої затримки.\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","formElements","currentTarget","Number","value","step","amount","delay1","position1","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$generatePromises","reset","Loading","circle","remove"],"version":3,"file":"03-promises.33dd001f.js.map"}